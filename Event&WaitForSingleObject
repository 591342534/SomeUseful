
事件event与waitforsingleobject的配合使用，能够解决很多同步问题，也可以在数据达到某个状态时启动另一个线程的执行，如报警。

event的几个函数：

1、CreateEvent和OpenEvent

HANDLE WINAPI CreateEvent(
  __in          LPSECURITY_ATTRIBUTES lpEventAttributes,    //表示安全控制，一般直接传入NULL,表示不能被子进程继承
  __in          BOOL bManualReset,  //参数确定事件是手动置位还是自动置位，传入TRUE表示手动置位，传入FALSE表示自动置位。
  __in          BOOL bInitialState,  //Event的初始状态， TRUE为触发，FALSE未触发
  __in          LPCTSTR lpName   //Event object的名字，NULL表示没名字（without a name）
);

要是CreateEvent创建的事件没名字  这个函数就没啥用了，不多做介绍，可查看msn。
HANDLE WINAPI OpenEvent(                   //获得已经存在的Event的事件句柄
  __in          DWORD dwDesiredAccess,
  __in          BOOL bInheritHandle,
  __in          LPCTSTR lpName       //要打开的事件名字
);

2、SetEvent，触发事件

1 BOOL SetEvent(HANDLE hEvent);
3、ResetEvent，使事件状态设为未触发，如在创建事件时第二个参数为TRUE手动设置，则需要该函数去恢复事件为未触发状态。

BOOL SetEvent(HANDLE hEvent);
4、PulseEvent， 如在创建事件时第二个参数为TRUE手动设置，其功能相当于SetEvent()后立即调用ResetEvent()，最好别用

1 BOOL PulseEvent(HANDLE hEvent)
5、CloseHandle()，关闭该句柄。

WaitForSingleObject函数。使线程处于等待状态，如等待某一事件的触发。

DWORD WINAPI WaitForSingleObject(

  HANDLE hHandle,                   //等待的触发句柄  ，  如前面说的Event的句柄

  DWORD dwMilliseconds             //等待多长时间，单位ms   如5000 则为5s   若为INFINITE表示无限等待

);
第一个参数hObject标识一个能够支持被通知/未通知的内核对象（前面列出的任何一种对象都适用）。
第二个参数dwMilliseconds允许该线程指明，为了等待该对象变为已通知状态，它将等待多长时间。（INFINITE为无限时间量，INFINITE已经定义为0xFFFFFFFF（或-1））
传递INFINITE有些危险。如果对象永远不变为已通知状态，那么调用线程永远不会被唤醒，它将永远处于死锁状态，不过，它不会浪费宝贵的C P U时间
例子：
DWORD dw = WaitForSingleObject(hProcess, 5000);
switch(dw)
{
   case WAIT_OBJECT_0:
      // The process terminated.
      break;
 
   case WAIT_TIMEOUT:
      // The process did not terminate within 5000 milliseconds.
      break;
 
   case WAIT_FAILED:
      // Bad call to function (invalid handle?)
      break;
}
上面这个代码告诉系统，在特定的进程（hProcess）终止运行(进程hProcess终止运行变成已经通知)之前，或者在5000m s时间结束之前，调用线程不应该变为可调度状态。
 WaitForSingleObject的返回值能够指明调用线程为什么再次变为可调度状态。
如果线程等待的对象变为已通知状态，那么返回值是WAIT_OBJECT_0。
如果设置的超时已经到期，则返回值是WAIT_TIMEOUT。
如果将一个错误的值（如一个无效句柄）传递给WaitForSingleObject，那么返回值将是WAIT_FAILED（若要了解详细信息，可调用GetLastError）。

WaitForMultipleObjects函数
WaitForMultipleObjects函数与WaitForSingleObject函数很相似，区别在于它允许调用线程同时查看若干个内核对象的已通知状态：
DWORD WaitForMultipleObjects(
DWORD dwCount,
   CONST HANDLE* phObjects,
   BOOL fWaitAll,
   DWORD dwMilliseconds
);
dwCount参数用于指明想要让函数查看的内核对象的数量。这个值必须在1与MAXIMU M_WAIT_OBJECTS（在Windows头文件中定义为64）之间。
phObjects参数是指向内核对象句柄的数组的指针。
可以以两种不同的方式来使用WaitForMultipleObjects函数。
一种方式是让线程进入等待状态，直到指定内核对象中的任何一个变为已通知状态。
另一种方式是让线程进入等待状态，直到所有指定的内核对象都变为已通知状态。
fWaitAll参数告诉该函数，你想要让它使用何种方式。如果为该参数传递TRUE，那么在所有对象变为已通知状态之前，该函数将不允许调用线程运行。
dwMilliseconds参数的作用与它在WaitForSingleObject中的作用完全相同。如果在等待的时候规定的时间到了，那么该函数无论如何都会返回。。
WaitForMultipleObjects函数的返回值告诉调用线程，为什么它会被重新调度。可能的返回值是WAIT_FAILED和WAIT_TIMEOUT。如果为fWaitAl l参数传递TRUE，同时所有对象均变为已通知状态，那么返回值是WAIT_OBJECT_0。如果为fWaitAll传递FALSE，那么一旦任何一个对象变为已通知状态，该函数便返回。在这种情况下，你可能想要知道哪个对象变为已通知状态。返回值是WAIT_OBJECT_0与（WAIT_OJECT_0 + dwCount-1）之间的一个值。换句话说，如果返回值不是WAIT_TIMEOUT，也不是WAIT_FAILED，那么应该从返回值中减去WAIT_OBJECT_0。产生的数字是作为第二个参数传递给WaitForMultipleObjects的句柄数组中的索引。该索引说明哪个对象变为已通知状态。
 
下面是说明这一情况的一些示例代码
HANDLE h[3];
h[0] = hProcess1;
h[1] = hProcess2;
h[2] = hProcess3;
DWORD dw = WaitForMultipleObjects(3, h, FALSE, 5000);
switch(dw)
{
   case WAIT_FAILED:
      // Bad call to function (invalid handle?)
      break;
 
   case WAIT_TIMEOUT:
      // None of the objects became signaled within 5000 milliseconds.
      break;
 
   case WAIT_OBJECT_0 + 0:
      // The process identified by h[0] (hProcess1) terminated.
      break;
 
   case WAIT_OBJECT_0 + 1:
      // The process identified by h[1] (hProcess2) terminated.
      break;
 
   case WAIT_OBJECT_0 + 2:
      // The process identified by h[2] (hProcess3) terminated.
      break;
}


一种应用的例子：

BOOL CMainDlg::OnInitDialog()
{
    CDialog::OnInitDialog();

    m_handle = CreateEvent(NULL,FALSE,FALSE,NULL);  //自动复位事件状态，初始状态未触发

    return TRUE;  
}
//线程1函数
{
   ....
   SetEvent(m_handle);       //触发事件
}
//线程2函数
{
    ......
   WaitForSingleObject(m_handle,INFINITE);  //无限等待 事件的触发才会执行后续程序
   ...........
}

最后，事件是内核对象，事件分为手动置位事件和自动置位事件。事件Event内部它包含一个使用计数（所有内核对象都有），一个布尔值表示是手动置位事件还是自动置位事件，另一个布尔值用来表示事件有无触发。事件可以由SetEvent()来触发，由ResetEvent()来设成未触发。还可以由PulseEvent()来发出一个事件脉冲。
